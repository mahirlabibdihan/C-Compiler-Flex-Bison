Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 1: Token <ID> Lexeme b found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : unit 
Line# 3: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 3: Token <ID> Lexeme x found
Line# 3: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 3: Token <ID> Lexeme y found
Line# 3: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
unit : var_declaration  
program : program unit 
Line# 5: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 5: Token <ID> Lexeme add_int found
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 5: Token <COMMA> Lexeme , found
parameter_list  : type_specifier ID
Line# 5: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 5: Token <RPAREN> Lexeme ) found
parameter_list  : parameter_list COMMA type_specifier
Line# 5: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON 
unit : func_declaration 
program : program unit 
Line# 7: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 7: Token <ID> Lexeme mul_float found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 7: Token <COMMA> Lexeme , found
parameter_list  : type_specifier ID
Line# 7: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 7: Token <COMMA> Lexeme , found
parameter_list  : parameter_list COMMA type_specifier
Line# 7: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 7: Token <RPAREN> Lexeme ) found
parameter_list  : parameter_list COMMA type_specifier
Line# 7: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON 
unit : func_declaration 
program : program unit 
Line# 9: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 9: Token <ID> Lexeme print_global found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON 
unit : func_declaration 
program : program unit 
Line# 11: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 11: Token <ID> Lexeme main found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <LCURL> Lexeme { found
Line# 12: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 12: Token <ID> Lexeme list found
Line# 12: Token <LSQUARE> Lexeme [ found
Line# 12: Token <CONST_INT> Lexeme 5 found
Line# 12: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 12: Token <COMMA> Lexeme , found
Line# 12: Token <ID> Lexeme another_list found
Line# 12: Token <LSQUARE> Lexeme [ found
Line# 12: Token <CONST_INT> Lexeme 5 found
Line# 12: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 
Line# 12: Token <COMMA> Lexeme , found
Line# 12: Token <ID> Lexeme i found
Line# 12: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 14: Token <ID> Lexeme a found
Line# 14: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 14: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 14: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <MULOP> Lexeme * found
Line# 14: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 14: Token <ADDOP> Lexeme - found
simple_expression : simple_expression ADDOP term  
Line# 14: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <MULOP> Lexeme / found
Line# 14: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 14: Token <ADDOP> Lexeme + found
simple_expression : simple_expression ADDOP term  
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <CONST_INT> Lexeme 7 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <MULOP> Lexeme % found
Line# 14: Token <CONST_INT> Lexeme 3 found
factor	: CONST_INT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 14: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
factor	: LPAREN expression RPAREN   
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 15: Token <ID> Lexeme x found
Line# 15: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 15: Token <CONST_FLOAT> Lexeme 2.3 found
factor	: CONST_FLOAT   
unary_expression : factor 
term :	unary_expression 
Line# 15: Token <MULOP> Lexeme * found
Line# 15: Token <CONST_FLOAT> Lexeme 4.7 found
factor	: CONST_FLOAT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 15: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 17: Token <ID> Lexeme list found
Line# 17: Token <LSQUARE> Lexeme [ found
Line# 17: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 17: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 17: Token <ASSIGNOP> Lexeme = found
Line# 17: Token <ID> Lexeme a found
Line# 17: Token <ADDOP> Lexeme + found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 17: Token <ID> Lexeme list found
Line# 17: Token <LSQUARE> Lexeme [ found
Line# 17: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 17: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 17: Token <ADDOP> Lexeme + found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
Line# 17: Token <ID> Lexeme another_list found
Line# 17: Token <LSQUARE> Lexeme [ found
Line# 17: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 17: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 17: Token <SEMICOLON> Lexeme ; found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 19: Token <LCURL> Lexeme { found
Line# 20: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 20: Token <ID> Lexeme i found
Line# 20: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 20: Token <ID> Lexeme j found
Line# 20: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 21: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 3
	7--> <i, INT, Width: 2, Offset: 14, IsParam: 0, Scope: 3> 
	8--> <j, INT, Width: 2, Offset: 16, IsParam: 0, Scope: 3> 
	ScopeTable# 2
	7--> <i, INT, Width: 2, Offset: 12, IsParam: 0, Scope: 2> 
	8--> <list, ARRAY, Width: 10, Offset: 2, IsParam: 0, Scope: 2, Base Type: INT> <another_list, ARRAY, Width: 0, Offset: 12, IsParam: 0, Scope: 2, Base Type: INT> 
	ScopeTable# 1
	1--> <y, FLOAT, Width: 4, Offset: 12, IsParam: 0, Scope: 1> <print_global, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID> 
	2--> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	4--> <add_int, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	6--> <mul_float, FUNCTION, Width: 12, Offset: -1, IsParam: 0, Scope: 1, RetType: FLOAT> 
	10--> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1> <x, FLOAT, Width: 4, Offset: 8, IsParam: 0, Scope: 1> 
statement : compound_statement 
statements : statements statement  
Line# 23: Token <FOR> Lexeme for found
Line# 23: Token <LPAREN> Lexeme ( found
Line# 23: Token <ID> Lexeme i found
Line# 23: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 23: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 23: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
Line# 23: Token <ID> Lexeme i found
Line# 23: Token <RELOP> Lexeme < found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 23: Token <CONST_INT> Lexeme 5 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 23: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
Line# 23: Token <ID> Lexeme i found
Line# 23: Token <INCOP> Lexeme ++ found
variable : ID 	 
factor	: variable INCOP   
unary_expression : factor 
term :	unary_expression 
Line# 23: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 23: Token <LCURL> Lexeme { found
Line# 24: Token <ID> Lexeme list found
Line# 24: Token <LSQUARE> Lexeme [ found
Line# 24: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 24: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 24: Token <INCOP> Lexeme ++ found
factor	: variable INCOP   
unary_expression : factor 
term :	unary_expression 
Line# 24: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 25: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 4
	ScopeTable# 2
	7--> <i, INT, Width: 2, Offset: 12, IsParam: 0, Scope: 2> 
	8--> <list, ARRAY, Width: 10, Offset: 2, IsParam: 0, Scope: 2, Base Type: INT> <another_list, ARRAY, Width: 0, Offset: 12, IsParam: 0, Scope: 2, Base Type: INT> 
	ScopeTable# 1
	1--> <y, FLOAT, Width: 4, Offset: 12, IsParam: 0, Scope: 1> <print_global, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID> 
	2--> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	4--> <add_int, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	6--> <mul_float, FUNCTION, Width: 12, Offset: -1, IsParam: 0, Scope: 1, RetType: FLOAT> 
	10--> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1> <x, FLOAT, Width: 4, Offset: 8, IsParam: 0, Scope: 1> 
statement : compound_statement 
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement
statements : statements statement  
Line# 27: Token <WHILE> Lexeme while found
Line# 27: Token <LPAREN> Lexeme ( found
Line# 27: Token <ID> Lexeme a found
Line# 27: Token <RELOP> Lexeme <= found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 27: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 27: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression 	 
expression 	: logic_expression	 
Line# 27: Token <LCURL> Lexeme { found
Line# 28: Token <ID> Lexeme a found
Line# 28: Token <DECOP> Lexeme -- found
variable : ID 	 
factor	: variable DECOP  
unary_expression : factor 
term :	unary_expression 
Line# 28: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 29: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 5
	ScopeTable# 2
	7--> <i, INT, Width: 2, Offset: 12, IsParam: 0, Scope: 2> 
	8--> <list, ARRAY, Width: 10, Offset: 2, IsParam: 0, Scope: 2, Base Type: INT> <another_list, ARRAY, Width: 0, Offset: 12, IsParam: 0, Scope: 2, Base Type: INT> 
	ScopeTable# 1
	1--> <y, FLOAT, Width: 4, Offset: 12, IsParam: 0, Scope: 1> <print_global, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID> 
	2--> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	4--> <add_int, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	6--> <mul_float, FUNCTION, Width: 12, Offset: -1, IsParam: 0, Scope: 1, RetType: FLOAT> 
	10--> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1> <x, FLOAT, Width: 4, Offset: 8, IsParam: 0, Scope: 1> 
statement : compound_statement 
statement : WHILE LPAREN expression RPAREN statement
statements : statements statement  
Line# 31: Token <IF> Lexeme if found
Line# 31: Token <LPAREN> Lexeme ( found
Line# 31: Token <ID> Lexeme list found
Line# 31: Token <LSQUARE> Lexeme [ found
Line# 31: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 31: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 31: Token <RELOP> Lexeme > found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 31: Token <CONST_INT> Lexeme 10 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 31: Token <LOGICOP> Lexeme || found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
Line# 31: Token <ID> Lexeme another_list found
Line# 31: Token <LSQUARE> Lexeme [ found
Line# 31: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 31: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
variable : ID LSQUARE expression RSQUARE  	 
Line# 31: Token <RELOP> Lexeme >= found
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 31: Token <CONST_INT> Lexeme 10 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 31: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression LOGICOP rel_expression 	 	 
expression 	: logic_expression	 
Line# 31: Token <LCURL> Lexeme { found
Line# 32: Token <ID> Lexeme i found
Line# 32: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 32: Token <LOGICOP> Lexeme ! found
Line# 32: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
unary_expression : NOT unary_expression  
term :	unary_expression 
Line# 32: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 33: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 6
	ScopeTable# 2
	7--> <i, INT, Width: 2, Offset: 12, IsParam: 0, Scope: 2> 
	8--> <list, ARRAY, Width: 10, Offset: 2, IsParam: 0, Scope: 2, Base Type: INT> <another_list, ARRAY, Width: 0, Offset: 12, IsParam: 0, Scope: 2, Base Type: INT> 
	ScopeTable# 1
	1--> <y, FLOAT, Width: 4, Offset: 12, IsParam: 0, Scope: 1> <print_global, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID> 
	2--> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	4--> <add_int, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	6--> <mul_float, FUNCTION, Width: 12, Offset: -1, IsParam: 0, Scope: 1, RetType: FLOAT> 
	10--> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1> <x, FLOAT, Width: 4, Offset: 8, IsParam: 0, Scope: 1> 
statement : compound_statement 
Line# 35: Token <IF> Lexeme if found
IF LPAREN expression RPAREN statement %prec THEN
statements : statements statement  
Line# 35: Token <LPAREN> Lexeme ( found
Line# 35: Token <ID> Lexeme a found
Line# 35: Token <RELOP> Lexeme == found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 35: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 35: Token <LOGICOP> Lexeme && found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
Line# 35: Token <ID> Lexeme x found
Line# 35: Token <RELOP> Lexeme != found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 35: Token <CONST_FLOAT> Lexeme 3.9 found
factor	: CONST_FLOAT   
unary_expression : factor 
term :	unary_expression 
Line# 35: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression RELOP simple_expression	  
logic_expression : rel_expression LOGICOP rel_expression 	 	 
expression 	: logic_expression	 
Line# 35: Token <LCURL> Lexeme { found
Line# 36: Token <ID> Lexeme y found
Line# 36: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 36: Token <ID> Lexeme mul_float found
Line# 36: Token <LPAREN> Lexeme ( found
Line# 36: Token <CONST_FLOAT> Lexeme 1.2 found
factor	: CONST_FLOAT   
unary_expression : factor 
term :	unary_expression 
Line# 36: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 36: Token <CONST_FLOAT> Lexeme 2.5 found
factor	: CONST_FLOAT   
unary_expression : factor 
term :	unary_expression 
Line# 36: Token <MULOP> Lexeme * found
Line# 36: Token <CONST_FLOAT> Lexeme 2.0 found
factor	: CONST_FLOAT   
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 36: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
Line# 36: Token <CONST_FLOAT> Lexeme 2.4 found
factor	: CONST_FLOAT   
unary_expression : factor 
term :	unary_expression 
Line# 36: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 36: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 37: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 7
	ScopeTable# 2
	7--> <i, INT, Width: 2, Offset: 12, IsParam: 0, Scope: 2> 
	8--> <list, ARRAY, Width: 10, Offset: 2, IsParam: 0, Scope: 2, Base Type: INT> <another_list, ARRAY, Width: 0, Offset: 12, IsParam: 0, Scope: 2, Base Type: INT> 
	ScopeTable# 1
	1--> <y, FLOAT, Width: 4, Offset: 12, IsParam: 0, Scope: 1> <print_global, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID> 
	2--> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	4--> <add_int, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	6--> <mul_float, FUNCTION, Width: 12, Offset: -1, IsParam: 0, Scope: 1, RetType: FLOAT> 
	10--> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1> <x, FLOAT, Width: 4, Offset: 8, IsParam: 0, Scope: 1> 
statement : compound_statement 
Line# 37: Token <ELSE> Lexeme else found
Line# 37: Token <LCURL> Lexeme { found
Line# 38: Token <ID> Lexeme b found
Line# 38: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 38: Token <ADDOP> Lexeme - found
Line# 38: Token <ID> Lexeme add_int found
Line# 38: Token <LPAREN> Lexeme ( found
Line# 38: Token <CONST_INT> Lexeme 4 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 38: Token <COMMA> Lexeme , found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 38: Token <CONST_INT> Lexeme 7 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 38: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
unary_expression : ADDOP unary_expression  
term :	unary_expression 
Line# 38: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statement  
Line# 39: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 8
	ScopeTable# 2
	7--> <i, INT, Width: 2, Offset: 12, IsParam: 0, Scope: 2> 
	8--> <list, ARRAY, Width: 10, Offset: 2, IsParam: 0, Scope: 2, Base Type: INT> <another_list, ARRAY, Width: 0, Offset: 12, IsParam: 0, Scope: 2, Base Type: INT> 
	ScopeTable# 1
	1--> <y, FLOAT, Width: 4, Offset: 12, IsParam: 0, Scope: 1> <print_global, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID> 
	2--> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	4--> <add_int, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	6--> <mul_float, FUNCTION, Width: 12, Offset: -1, IsParam: 0, Scope: 1, RetType: FLOAT> 
	10--> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1> <x, FLOAT, Width: 4, Offset: 8, IsParam: 0, Scope: 1> 
statement : compound_statement 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statements : statements statement  
Line# 41: Token <ID> Lexeme print_global found
Line# 41: Token <LPAREN> Lexeme ( found
Line# 41: Token <RPAREN> Lexeme ) found
factor	: ID LPAREN RPAREN   
unary_expression : factor 
term :	unary_expression 
Line# 41: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 43: Token <RETURN> Lexeme return found
Line# 43: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 43: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 44: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 2
	7--> <i, INT, Width: 2, Offset: 12, IsParam: 0, Scope: 2> 
	8--> <list, ARRAY, Width: 10, Offset: 2, IsParam: 0, Scope: 2, Base Type: INT> <another_list, ARRAY, Width: 0, Offset: 12, IsParam: 0, Scope: 2, Base Type: INT> 
	ScopeTable# 1
	1--> <y, FLOAT, Width: 4, Offset: 12, IsParam: 0, Scope: 1> <print_global, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID> 
	2--> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	4--> <add_int, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	6--> <mul_float, FUNCTION, Width: 12, Offset: -1, IsParam: 0, Scope: 1, RetType: FLOAT> 
	10--> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1> <x, FLOAT, Width: 4, Offset: 8, IsParam: 0, Scope: 1> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition  
program : program unit 
Line# 46: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 46: Token <ID> Lexeme add_int found
Line# 46: Token <LPAREN> Lexeme ( found
Line# 46: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 46: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 46: Token <COMMA> Lexeme , found
Line# 46: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 46: Token <ID> Lexeme b found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 46: Token <RPAREN> Lexeme ) found
Line# 46: Token <LCURL> Lexeme { found
INT-->INT
INT-->INT
Line# 47: Token <RETURN> Lexeme return found
Line# 47: Token <ID> Lexeme a found
Line# 47: Token <ADDOP> Lexeme + found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
Line# 47: Token <ID> Lexeme b found
Line# 47: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statement  
Line# 48: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 9
	10--> <a, INT, Width: 2, Offset: 6, IsParam: 1, Scope: 9> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 9> 
	ScopeTable# 1
	1--> <y, FLOAT, Width: 4, Offset: 12, IsParam: 0, Scope: 1> <print_global, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID> 
	2--> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	4--> <add_int, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	6--> <mul_float, FUNCTION, Width: 12, Offset: -1, IsParam: 0, Scope: 1, RetType: FLOAT> 
	10--> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1> <x, FLOAT, Width: 4, Offset: 8, IsParam: 0, Scope: 1> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 50: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 50: Token <ID> Lexeme mul_float found
Line# 50: Token <LPAREN> Lexeme ( found
Line# 50: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 50: Token <ID> Lexeme x found
parameter_list  : type_specifier ID
Line# 50: Token <COMMA> Lexeme , found
Line# 50: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 50: Token <ID> Lexeme y found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 50: Token <COMMA> Lexeme , found
Line# 50: Token <FLOAT> Lexeme float found
type_specifier	: FLOAT 
Line# 50: Token <ID> Lexeme z found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 50: Token <RPAREN> Lexeme ) found
Line# 50: Token <LCURL> Lexeme { found
FLOAT-->FLOAT
FLOAT-->FLOAT
FLOAT-->FLOAT
Line# 51: Token <RETURN> Lexeme return found
Line# 51: Token <ID> Lexeme x found
Line# 51: Token <MULOP> Lexeme * found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
Line# 51: Token <ID> Lexeme y found
Line# 51: Token <MULOP> Lexeme * found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	term MULOP unary_expression 
Line# 51: Token <ID> Lexeme z found
Line# 51: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	term MULOP unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statement  
Line# 52: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 10
	1--> <y, FLOAT, Width: 4, Offset: 10, IsParam: 1, Scope: 10> 
	2--> <z, FLOAT, Width: 4, Offset: 6, IsParam: 1, Scope: 10> 
	11--> <x, FLOAT, Width: 4, Offset: 14, IsParam: 1, Scope: 10> 
	ScopeTable# 1
	1--> <y, FLOAT, Width: 4, Offset: 12, IsParam: 0, Scope: 1> <print_global, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID> 
	2--> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	4--> <add_int, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	6--> <mul_float, FUNCTION, Width: 12, Offset: -1, IsParam: 0, Scope: 1, RetType: FLOAT> 
	10--> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1> <x, FLOAT, Width: 4, Offset: 8, IsParam: 0, Scope: 1> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 54: Token <VOID> Lexeme void found
type_specifier	: VOID
Line# 54: Token <ID> Lexeme print_global found
Line# 54: Token <LPAREN> Lexeme ( found
Line# 54: Token <RPAREN> Lexeme ) found
Line# 54: Token <LCURL> Lexeme { found
Line# 55: Token <PRINTLN> Lexeme println found
Line# 55: Token <LPAREN> Lexeme ( found
Line# 55: Token <ID> Lexeme a found
Line# 55: Token <RPAREN> Lexeme ) found
Line# 55: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statement  
Line# 56: Token <PRINTLN> Lexeme println found
Line# 56: Token <LPAREN> Lexeme ( found
Line# 56: Token <ID> Lexeme b found
Line# 56: Token <RPAREN> Lexeme ) found
Line# 56: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 57: Token <PRINTLN> Lexeme println found
Line# 57: Token <LPAREN> Lexeme ( found
Line# 57: Token <ID> Lexeme x found
Line# 57: Token <RPAREN> Lexeme ) found
Line# 57: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 58: Token <PRINTLN> Lexeme println found
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <ID> Lexeme y found
Line# 58: Token <RPAREN> Lexeme ) found
Line# 58: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 59: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 11
	ScopeTable# 1
	1--> <y, FLOAT, Width: 4, Offset: 12, IsParam: 0, Scope: 1> <print_global, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: VOID> 
	2--> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	4--> <add_int, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT> 
	6--> <mul_float, FUNCTION, Width: 12, Offset: -1, IsParam: 0, Scope: 1, RetType: FLOAT> 
	10--> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 1> 
	11--> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 1> <x, FLOAT, Width: 4, Offset: 8, IsParam: 0, Scope: 1> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition  
program : program unit 
start : program 
Total Lines: 60
Total Errors: 0
