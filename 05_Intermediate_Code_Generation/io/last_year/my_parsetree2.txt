start : program 	<Line: 1-14>
 program : program unit 	<Line: 1-14>
  program : unit 	<Line: 1-3>
   unit : func_definition 	<Line: 1-3>
    func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 1-3>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     ID : func	<Line: 1>
     LPAREN : (	<Line: 1>
     parameter_list : type_specifier ID 	<Line: 1-1>
      type_specifier : INT 	<Line: 1-1>
       INT : int	<Line: 1>
      ID : a	<Line: 1>
     RPAREN : )	<Line: 1>
     compound_statement : LCURL statements RCURL 	<Line: 1-3>
      LCURL : {	<Line: 1>
      statements : statement 	<Line: 2-2>
       statement : RETURN expression SEMICOLON 	<Line: 2-2>
        RETURN : return	<Line: 2>
        expression : logic_expression 	<Line: 2-2>
         logic_expression : rel_expression 	<Line: 2-2>
          rel_expression : simple_expression 	<Line: 2-2>
           simple_expression : term 	<Line: 2-2>
            term : unary_expression 	<Line: 2-2>
             unary_expression : factor 	<Line: 2-2>
              factor : variable 	<Line: 2-2>
               variable : ID 	<Line: 2-2>
                ID : a	<Line: 2>
        SEMICOLON : ;	<Line: 2>
      RCURL : }	<Line: 3>
  unit : func_definition 	<Line: 5-14>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 5-14>
    type_specifier : INT 	<Line: 5-5>
     INT : int	<Line: 5>
    ID : main	<Line: 5>
    LPAREN : (	<Line: 5>
    RPAREN : )	<Line: 5>
    compound_statement : LCURL statements RCURL 	<Line: 5-14>
     LCURL : {	<Line: 5>
     statements : statements statement 	<Line: 6-13>
      statements : statements statement 	<Line: 6-12>
       statements : statements statement 	<Line: 6-11>
        statements : statements statement 	<Line: 6-10>
         statements : statements statement 	<Line: 6-9>
          statements : statements statement 	<Line: 6-8>
           statements : statements statement 	<Line: 6-7>
            statements : statements statement 	<Line: 6-6>
             statements : statement 	<Line: 6-6>
              statement : var_declaration 	<Line: 6-6>
               var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 6-6>
                type_specifier : INT 	<Line: 6-6>
                 INT : int	<Line: 6>
                declaration_list : declaration_list COMMA ID 	<Line: 6-6>
                 declaration_list : declaration_list COMMA ID 	<Line: 6-6>
                  declaration_list : declaration_list COMMA ID 	<Line: 6-6>
                   declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 6-6>
                    ID : a	<Line: 6>
                    LSQUARE : [	<Line: 6>
                    CONST_INT : 2	<Line: 6>
                    RSQUARE : ]	<Line: 6>
                   COMMA : ,	<Line: 6>
                   ID : c	<Line: 6>
                  COMMA : ,	<Line: 6>
                  ID : i	<Line: 6>
                 COMMA : ,	<Line: 6>
                 ID : j	<Line: 6>
                SEMICOLON : ;	<Line: 6>
             statement : var_declaration 	<Line: 6-6>
              var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 6-6>
               type_specifier : FLOAT 	<Line: 6-6>
                FLOAT : float	<Line: 6>
               declaration_list : ID 	<Line: 6-6>
                ID : c	<Line: 6>
               SEMICOLON : ;	<Line: 6>
            statement : expression_statement 	<Line: 7-7>
             expression_statement : expression SEMICOLON 	<Line: 7-7>
              expression : variable ASSIGNOP logic_expression 	<Line: 7-7>
               variable : ID LSQUARE expression RSQUARE 	<Line: 7-7>
                ID : a	<Line: 7>
                LSQUARE : [	<Line: 7>
                expression : logic_expression 	<Line: 7-7>
                 logic_expression : rel_expression 	<Line: 7-7>
                  rel_expression : simple_expression 	<Line: 7-7>
                   simple_expression : term 	<Line: 7-7>
                    term : unary_expression 	<Line: 7-7>
                     unary_expression : factor 	<Line: 7-7>
                      factor : CONST_FLOAT 	<Line: 7-7>
                       CONST_FLOAT : 2.5	<Line: 7>
                RSQUARE : ]	<Line: 7>
               ASSIGNOP : =	<Line: 7>
               logic_expression : rel_expression 	<Line: 7-7>
                rel_expression : simple_expression 	<Line: 7-7>
                 simple_expression : term 	<Line: 7-7>
                  term : unary_expression 	<Line: 7-7>
                   unary_expression : factor 	<Line: 7-7>
                    factor : CONST_INT 	<Line: 7-7>
                     CONST_INT : 1	<Line: 7>
              SEMICOLON : ;	<Line: 7>
           statement : expression_statement 	<Line: 8-8>
            expression_statement : expression SEMICOLON 	<Line: 8-8>
             expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
              variable : ID 	<Line: 8-8>
               ID : i	<Line: 8>
              ASSIGNOP : =	<Line: 8>
              logic_expression : rel_expression 	<Line: 8-8>
               rel_expression : simple_expression 	<Line: 8-8>
                simple_expression : term 	<Line: 8-8>
                 term : unary_expression 	<Line: 8-8>
                  unary_expression : factor 	<Line: 8-8>
                   factor : CONST_FLOAT 	<Line: 8-8>
                    CONST_FLOAT : 2.3	<Line: 8>
             SEMICOLON : ;	<Line: 8>
          statement : expression_statement 	<Line: 9-9>
           expression_statement : expression SEMICOLON 	<Line: 9-9>
            expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
             variable : ID 	<Line: 9-9>
              ID : j	<Line: 9>
             ASSIGNOP : =	<Line: 9>
             logic_expression : rel_expression 	<Line: 9-9>
              rel_expression : simple_expression 	<Line: 9-9>
               simple_expression : term 	<Line: 9-9>
                term : term MULOP unary_expression 	<Line: 9-9>
                 term : unary_expression 	<Line: 9-9>
                  unary_expression : factor 	<Line: 9-9>
                   factor : CONST_INT 	<Line: 9-9>
                    CONST_INT : 2	<Line: 9>
                 MULOP : %	<Line: 9>
                 unary_expression : factor 	<Line: 9-9>
                  factor : CONST_FLOAT 	<Line: 9-9>
                   CONST_FLOAT : 3.7	<Line: 9>
            SEMICOLON : ;	<Line: 9>
         statement : expression_statement 	<Line: 10-10>
          expression_statement : expression SEMICOLON 	<Line: 10-10>
           expression : variable ASSIGNOP logic_expression 	<Line: 10-10>
            variable : ID 	<Line: 10-10>
             ID : a	<Line: 10>
            ASSIGNOP : =	<Line: 10>
            logic_expression : rel_expression 	<Line: 10-10>
             rel_expression : simple_expression 	<Line: 10-10>
              simple_expression : term 	<Line: 10-10>
               term : unary_expression 	<Line: 10-10>
                unary_expression : factor 	<Line: 10-10>
                 factor : CONST_INT 	<Line: 10-10>
                  CONST_INT : 4	<Line: 10>
           SEMICOLON : ;	<Line: 10>
        statement : expression_statement 	<Line: 11-11>
         expression_statement : expression SEMICOLON 	<Line: 11-11>
          expression : logic_expression 	<Line: 11-11>
           logic_expression : rel_expression 	<Line: 11-11>
            rel_expression : simple_expression 	<Line: 11-11>
             simple_expression : term 	<Line: 11-11>
              term : unary_expression 	<Line: 11-11>
               unary_expression : factor 	<Line: 11-11>
                factor : ID LPAREN argument_list RPAREN 	<Line: 11-11>
                 ID : func	<Line: 11>
                 LPAREN : (	<Line: 11>
                 argument_list : arguments 	<Line: 11-11>
                  arguments : logic_expression 	<Line: 11-11>
                   logic_expression : rel_expression 	<Line: 11-11>
                    rel_expression : simple_expression 	<Line: 11-11>
                     simple_expression : term 	<Line: 11-11>
                      term : unary_expression 	<Line: 11-11>
                       unary_expression : factor 	<Line: 11-11>
                        factor : variable 	<Line: 11-11>
                         variable : ID 	<Line: 11-11>
                          ID : a	<Line: 11>
                 RPAREN : )	<Line: 11>
          SEMICOLON : ;	<Line: 11>
       statement : expression_statement 	<Line: 12-12>
        expression_statement : expression SEMICOLON 	<Line: 12-12>
         expression : variable ASSIGNOP logic_expression 	<Line: 12-12>
          variable : ID 	<Line: 12-12>
           ID : b	<Line: 12>
          ASSIGNOP : =	<Line: 12>
          logic_expression : rel_expression 	<Line: 12-12>
           rel_expression : simple_expression 	<Line: 12-12>
            simple_expression : term 	<Line: 12-12>
             term : unary_expression 	<Line: 12-12>
              unary_expression : factor 	<Line: 12-12>
               factor : CONST_INT 	<Line: 12-12>
                CONST_INT : 8	<Line: 12>
         SEMICOLON : ;	<Line: 12>
      statement : RETURN expression SEMICOLON 	<Line: 13-13>
       RETURN : return	<Line: 13>
       expression : logic_expression 	<Line: 13-13>
        logic_expression : rel_expression 	<Line: 13-13>
         rel_expression : simple_expression 	<Line: 13-13>
          simple_expression : term 	<Line: 13-13>
           term : unary_expression 	<Line: 13-13>
            unary_expression : factor 	<Line: 13-13>
             factor : CONST_INT 	<Line: 13-13>
              CONST_INT : 0	<Line: 13>
       SEMICOLON : ;	<Line: 13>
     RCURL : }	<Line: 14>
